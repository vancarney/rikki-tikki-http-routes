// Generated by CoffeeScript 1.9.0
var Adapter, RoutesAdapter, path, url, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

url = require('url');

path = require('path');

_ = require('lodash')._;

Adapter = require('rikki-tikki-route-adapter');

RoutesAdapter = (function(_super) {
  __extends(RoutesAdapter, _super);

  function RoutesAdapter() {
    this.requestHandler = __bind(this.requestHandler, this);
    return RoutesAdapter.__super__.constructor.apply(this, arguments);
  }

  RoutesAdapter.prototype.required = ['router'];

  RoutesAdapter.prototype.routes = [];

  RoutesAdapter.prototype.addRoute = function(route, method, handler) {
    var fn, match;
    fn = (match = this.params.router.match(route)) != null ? match.fn : {};
    fn[method.toUpperCase()] = handler;
    this.routes = _.union(this.routes, route);
    return this.params.router.addRoute(route, fn);
  };

  RoutesAdapter.prototype.requestHandler = function(req, res) {
    var normalPathname, parsed, pathname, queryToObject, route;
    normalPathname = path.normalize(pathname = (parsed = url.parse(req.url)).pathname).replace(/\\/g, '/');
    route = this.params.router.match(normalPathname);
    if (!route) {
      return;
    }
    queryToObject = function(string) {
      var o;
      o = {};
      decodeURIComponent(string).replace('?', '').split('&').forEach((function(_this) {
        return function(v, k) {
          var p;
          if ((p = v.split('=')).length === 2) {
            return o[p[0]] = p[1];
          }
        };
      })(this));
      return o;
    };
    req.params = route.params;
    req.query = queryToObject(req.url.split('?').pop());
    if (((route.route != null) && this.routes.lastIndexOf(route.route)) >= 0) {
      return route.fn[req.method](req, res);
    } else {
      return route.fn(req, res);
    }
  };

  RoutesAdapter.prototype.responseHandler = function(res, data, headers) {
    var header, value;
    if (!headers) {
      res.setHeader('Content-Type', 'application/json');
    } else {
      for (header in headers) {
        value = headers[header];
        console.log(header + ": " + value);
        res.setHeader(header, value);
      }
    }
    res.writeHead("" + data.status, data.status !== 200 ? "" + data.content : 'ok');
    return res.end(data.status === 200 ? (typeof data.content === 'object' ? JSON.stringify(data.content) : data.content) : "");
  };

  return RoutesAdapter;

})(Adapter);

module.exports = RoutesAdapter;
